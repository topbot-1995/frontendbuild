{"version":3,"file":"static/js/369.accdba45.chunk.js","mappings":"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","sources":["../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/RouterCtrl.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/utils/CoreUtil.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/EventsCtrl.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/OptionsCtrl.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/ConfigCtrl.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/ExplorerCtrl.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/utils/ExplorerUtil.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/ModalCtrl.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/ThemeCtrl.ts","../node_modules/@walletconnect/modal/src/client.ts","../node_modules/@walletconnect/modal/node_modules/@walletconnect/modal-core/src/controllers/ToastCtrl.ts"],"sourcesContent":["import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { RouterCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<RouterCtrlState>({\n  history: ['ConnectWallet'],\n  view: 'ConnectWallet',\n  data: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const RouterCtrl = {\n  state,\n\n  subscribe(callback: (newState: RouterCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  push(view: RouterCtrlState['view'], data?: RouterCtrlState['data']) {\n    if (view !== state.view) {\n      state.view = view\n      if (data) {\n        state.data = data\n      }\n      state.history.push(view)\n    }\n  },\n\n  reset(view: RouterCtrlState['view']) {\n    state.view = view\n    state.history = [view]\n  },\n\n  replace(view: RouterCtrlState['view']) {\n    if (state.history.length > 1) {\n      state.history[state.history.length - 1] = view\n      state.view = view\n    }\n  },\n\n  goBack() {\n    if (state.history.length > 1) {\n      state.history.pop()\n      const [last] = state.history.slice(-1)\n      state.view = last\n    }\n  },\n\n  setData(data: RouterCtrlState['data']) {\n    state.data = data\n  }\n}\n","import { RouterCtrl } from '../controllers/RouterCtrl'\n\nexport const CoreUtil = {\n  WALLETCONNECT_DEEPLINK_CHOICE: 'WALLETCONNECT_DEEPLINK_CHOICE',\n\n  WCM_VERSION: 'WCM_VERSION',\n\n  RECOMMENDED_WALLET_AMOUNT: 9,\n\n  isMobile() {\n    if (typeof window !== 'undefined') {\n      return Boolean(\n        window.matchMedia('(pointer:coarse)').matches ||\n          /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)\n      )\n    }\n\n    return false\n  },\n\n  isAndroid() {\n    return CoreUtil.isMobile() && navigator.userAgent.toLowerCase().includes('android')\n  },\n\n  isIos() {\n    const ua = navigator.userAgent.toLowerCase()\n\n    return CoreUtil.isMobile() && (ua.includes('iphone') || ua.includes('ipad'))\n  },\n\n  isHttpUrl(url: string) {\n    return url.startsWith('http://') || url.startsWith('https://')\n  },\n\n  isArray<T>(data?: T | T[]): data is T[] {\n    return Array.isArray(data) && data.length > 0\n  },\n\n  formatNativeUrl(appUrl: string, wcUri: string, name: string): string {\n    if (CoreUtil.isHttpUrl(appUrl)) {\n      return this.formatUniversalUrl(appUrl, wcUri, name)\n    }\n    let safeAppUrl = appUrl\n    if (!safeAppUrl.includes('://')) {\n      safeAppUrl = appUrl.replaceAll('/', '').replaceAll(':', '')\n      safeAppUrl = `${safeAppUrl}://`\n    }\n    if (!safeAppUrl.endsWith('/')) {\n      safeAppUrl = `${safeAppUrl}/`\n    }\n    this.setWalletConnectDeepLink(safeAppUrl, name)\n    const encodedWcUrl = encodeURIComponent(wcUri)\n\n    return `${safeAppUrl}wc?uri=${encodedWcUrl}`\n  },\n\n  formatUniversalUrl(appUrl: string, wcUri: string, name: string): string {\n    if (!CoreUtil.isHttpUrl(appUrl)) {\n      return this.formatNativeUrl(appUrl, wcUri, name)\n    }\n    let safeAppUrl = appUrl\n    if (!safeAppUrl.endsWith('/')) {\n      safeAppUrl = `${safeAppUrl}/`\n    }\n    this.setWalletConnectDeepLink(safeAppUrl, name)\n    const encodedWcUrl = encodeURIComponent(wcUri)\n\n    return `${safeAppUrl}wc?uri=${encodedWcUrl}`\n  },\n\n  async wait(miliseconds: number) {\n    return new Promise(resolve => {\n      setTimeout(resolve, miliseconds)\n    })\n  },\n\n  openHref(href: string, target: '_blank' | '_self') {\n    window.open(href, target, 'noreferrer noopener')\n  },\n\n  setWalletConnectDeepLink(href: string, name: string) {\n    try {\n      localStorage.setItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href, name }))\n    } catch {\n      console.info('Unable to set WalletConnect deep link')\n    }\n  },\n\n  setWalletConnectAndroidDeepLink(wcUri: string) {\n    try {\n      const [href] = wcUri.split('?')\n      localStorage.setItem(\n        CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE,\n        JSON.stringify({ href, name: 'Android' })\n      )\n    } catch {\n      console.info('Unable to set WalletConnect android deep link')\n    }\n  },\n\n  removeWalletConnectDeepLink() {\n    try {\n      localStorage.removeItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE)\n    } catch {\n      console.info('Unable to remove WalletConnect deep link')\n    }\n  },\n\n  setModalVersionInStorage() {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(CoreUtil.WCM_VERSION, process.env.ROLLUP_WCM_VERSION ?? 'UNKNOWN')\n      }\n    } catch {\n      console.info('Unable to set Web3Modal version in storage')\n    }\n  },\n\n  getWalletRouterData() {\n    const routerData = RouterCtrl.state.data?.Wallet\n    if (!routerData) {\n      throw new Error('Missing \"Wallet\" view data')\n    }\n\n    return routerData\n  }\n}\n","import { proxy, snapshot, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { EventsCtrlState, ModalEvent, ModalEventData } from '../types/controllerTypes'\n\n// -- helpers ------------------------------------------------------ //\nconst isEnabled =\n  typeof location !== 'undefined' &&\n  (location.hostname.includes('localhost') || location.protocol.includes('https'))\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<EventsCtrlState>({\n  enabled: isEnabled,\n  userSessionId: '',\n  events: [],\n  connectedWalletId: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const EventsCtrl = {\n  state,\n\n  subscribe(callback: (newEvent: ModalEvent) => void) {\n    return valtioSub(state.events, () => callback(snapshot(state.events[state.events.length - 1])))\n  },\n\n  initialize() {\n    if (state.enabled && typeof crypto?.randomUUID !== 'undefined') {\n      state.userSessionId = crypto.randomUUID()\n    }\n  },\n\n  setConnectedWalletId(connectedWalletId: EventsCtrlState['connectedWalletId']) {\n    state.connectedWalletId = connectedWalletId\n  },\n\n  click(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'CLICK' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  },\n\n  track(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'TRACK' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  },\n\n  view(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'VIEW' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { OptionsCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<OptionsCtrlState>({\n  chains: undefined,\n  walletConnectUri: undefined,\n  isAuth: false,\n  isCustomDesktop: false,\n  isCustomMobile: false,\n  isDataLoaded: false,\n  isUiLoaded: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const OptionsCtrl = {\n  state,\n\n  subscribe(callback: (newState: OptionsCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setChains(chains: OptionsCtrlState['chains']) {\n    state.chains = chains\n  },\n\n  setWalletConnectUri(walletConnectUri: OptionsCtrlState['walletConnectUri']) {\n    state.walletConnectUri = walletConnectUri\n  },\n\n  setIsCustomDesktop(isCustomDesktop: OptionsCtrlState['isCustomDesktop']) {\n    state.isCustomDesktop = isCustomDesktop\n  },\n\n  setIsCustomMobile(isCustomMobile: OptionsCtrlState['isCustomMobile']) {\n    state.isCustomMobile = isCustomMobile\n  },\n\n  setIsDataLoaded(isDataLoaded: OptionsCtrlState['isDataLoaded']) {\n    state.isDataLoaded = isDataLoaded\n  },\n\n  setIsUiLoaded(isUiLoaded: OptionsCtrlState['isUiLoaded']) {\n    state.isUiLoaded = isUiLoaded\n  },\n\n  setIsAuth(isAuth: OptionsCtrlState['isAuth']) {\n    state.isAuth = isAuth\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ConfigCtrlState } from '../types/controllerTypes'\nimport { CoreUtil } from '../utils/CoreUtil'\nimport { EventsCtrl } from './EventsCtrl'\nimport { OptionsCtrl } from './OptionsCtrl'\n\nconst state = proxy<ConfigCtrlState>({\n  projectId: '',\n  mobileWallets: undefined,\n  desktopWallets: undefined,\n  walletImages: undefined,\n  chains: undefined,\n  enableAuthMode: false,\n  enableExplorer: true,\n  explorerExcludedWalletIds: undefined,\n  explorerRecommendedWalletIds: undefined,\n  termsOfServiceUrl: undefined,\n  privacyPolicyUrl: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const ConfigCtrl = {\n  state,\n\n  subscribe(callback: (newState: ConfigCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setConfig(config: ConfigCtrlState) {\n    EventsCtrl.initialize()\n    OptionsCtrl.setChains(config.chains)\n    OptionsCtrl.setIsAuth(Boolean(config.enableAuthMode))\n    OptionsCtrl.setIsCustomMobile(Boolean(config.mobileWallets?.length))\n    OptionsCtrl.setIsCustomDesktop(Boolean(config.desktopWallets?.length))\n\n    CoreUtil.setModalVersionInStorage()\n\n    Object.assign(state, config)\n  }\n}\n","import { proxy } from 'valtio/vanilla'\nimport type { ExplorerCtrlState, ListingParams } from '../types/controllerTypes'\nimport { CoreUtil } from '../utils/CoreUtil'\nimport { ExplorerUtil } from '../utils/ExplorerUtil'\nimport { ConfigCtrl } from './ConfigCtrl'\nimport { OptionsCtrl } from './OptionsCtrl'\n\nconst isMobile = CoreUtil.isMobile()\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ExplorerCtrlState>({\n  wallets: { listings: [], total: 0, page: 1 },\n  search: { listings: [], total: 0, page: 1 },\n  recomendedWallets: []\n})\n\n// -- controller --------------------------------------------------- //\nexport const ExplorerCtrl = {\n  state,\n\n  async getRecomendedWallets() {\n    const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state\n\n    // Don't fetch recomended wallets\n    if (\n      explorerRecommendedWalletIds === 'NONE' ||\n      (explorerExcludedWalletIds === 'ALL' && !explorerRecommendedWalletIds)\n    ) {\n      return state.recomendedWallets\n    }\n\n    // Fetch only recomended wallets defined in config\n    if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n      const recommendedIds = explorerRecommendedWalletIds.join(',')\n      const params = { recommendedIds }\n      const { listings } = await ExplorerUtil.getAllListings(params)\n      const listingsArr = Object.values(listings)\n      listingsArr.sort((a, b) => {\n        const aIndex = explorerRecommendedWalletIds.indexOf(a.id)\n        const bIndex = explorerRecommendedWalletIds.indexOf(b.id)\n\n        return aIndex - bIndex\n      })\n      state.recomendedWallets = listingsArr\n    }\n\n    // Fetch default recomended wallets based on user's device, options and excluded config\n    else {\n      const { chains, isAuth } = OptionsCtrl.state\n      const chainsFilter = chains?.join(',')\n      const isExcluded = CoreUtil.isArray(explorerExcludedWalletIds)\n      const params = {\n        page: 1,\n        sdks: isAuth ? 'auth_v1' : undefined,\n        entries: CoreUtil.RECOMMENDED_WALLET_AMOUNT,\n        chains: chainsFilter,\n        version: 2,\n        excludedIds: isExcluded ? explorerExcludedWalletIds.join(',') : undefined\n      }\n      const { listings } = isMobile\n        ? await ExplorerUtil.getMobileListings(params)\n        : await ExplorerUtil.getDesktopListings(params)\n      state.recomendedWallets = Object.values(listings)\n    }\n\n    return state.recomendedWallets\n  },\n\n  async getWallets(params: ListingParams) {\n    const extendedParams: ListingParams = { ...params }\n    const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state\n    const { recomendedWallets } = state\n\n    // Don't fetch any wallets if all are excluded\n    if (explorerExcludedWalletIds === 'ALL') {\n      return state.wallets\n    }\n\n    // Don't fetch recomended wallets, as we already have these\n    if (recomendedWallets.length) {\n      extendedParams.excludedIds = recomendedWallets.map(wallet => wallet.id).join(',')\n    } else if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n      extendedParams.excludedIds = explorerRecommendedWalletIds.join(',')\n    }\n\n    // Don't fetch user defined excluded wallets & recomended wallets\n    if (CoreUtil.isArray(explorerExcludedWalletIds)) {\n      extendedParams.excludedIds = [extendedParams.excludedIds, explorerExcludedWalletIds]\n        .filter(Boolean)\n        .join(',')\n    }\n\n    // Fetch only auth wallets\n    if (OptionsCtrl.state.isAuth) {\n      extendedParams.sdks = 'auth_v1'\n    }\n\n    const { page, search } = params\n    const { listings: listingsObj, total } = isMobile\n      ? await ExplorerUtil.getMobileListings(extendedParams)\n      : await ExplorerUtil.getDesktopListings(extendedParams)\n    const listings = Object.values(listingsObj)\n    const type = search ? 'search' : 'wallets'\n    state[type] = {\n      listings: [...state[type].listings, ...listings],\n      total,\n      page: page ?? 1\n    }\n\n    return { listings, total }\n  },\n\n  getWalletImageUrl(imageId: string) {\n    return ExplorerUtil.getWalletImageUrl(imageId)\n  },\n\n  getAssetImageUrl(imageId: string) {\n    return ExplorerUtil.getAssetImageUrl(imageId)\n  },\n\n  resetSearch() {\n    state.search = { listings: [], total: 0, page: 1 }\n  }\n}\n","import { ConfigCtrl } from '../controllers/ConfigCtrl'\nimport type { ListingParams, ListingResponse } from '../types/controllerTypes'\n\n// -- Helpers -------------------------------------------------------\nconst W3M_API = 'https://explorer-api.walletconnect.com'\n\nasync function fetchListings(endpoint: string, params: ListingParams) {\n  const url = new URL(endpoint, W3M_API)\n  url.searchParams.append('projectId', ConfigCtrl.state.projectId)\n  Object.entries(params).forEach(([key, value]) => {\n    if (value) {\n      url.searchParams.append(key, String(value))\n    }\n  })\n  const request = await fetch(url)\n\n  return request.json() as Promise<ListingResponse>\n}\n\n// -- Utility -------------------------------------------------------\nexport const ExplorerUtil = {\n  async getDesktopListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getDesktopListings', params)\n  },\n\n  async getMobileListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getMobileListings', params)\n  },\n\n  async getInjectedListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getInjectedListings', params)\n  },\n\n  async getAllListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getAllListings', params)\n  },\n\n  getWalletImageUrl(imageId: string) {\n    return `${W3M_API}/w3m/v1/getWalletImage/${imageId}?projectId=${ConfigCtrl.state.projectId}`\n  },\n\n  getAssetImageUrl(imageId: string) {\n    return `${W3M_API}/w3m/v1/getAssetImage/${imageId}?projectId=${ConfigCtrl.state.projectId}`\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ModalCtrlState } from '../types/controllerTypes'\nimport { OptionsCtrl } from './OptionsCtrl'\nimport { RouterCtrl } from './RouterCtrl'\n\n// -- types -------------------------------------------------------- //\nexport interface OpenOptions {\n  uri: string\n  chains?: string[]\n}\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ModalCtrlState>({\n  open: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const ModalCtrl = {\n  state,\n\n  subscribe(callback: (newState: ModalCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  async open(options?: OpenOptions) {\n    return new Promise<void>(resolve => {\n      const { isUiLoaded, isDataLoaded } = OptionsCtrl.state\n\n      OptionsCtrl.setWalletConnectUri(options?.uri)\n      OptionsCtrl.setChains(options?.chains)\n      RouterCtrl.reset('ConnectWallet')\n\n      // Open modal if essential async data is ready\n      if (isUiLoaded && isDataLoaded) {\n        state.open = true\n        resolve()\n      }\n      // Otherwise (slow network) re-attempt open checks\n      else {\n        const interval = setInterval(() => {\n          const opts = OptionsCtrl.state\n          if (opts.isUiLoaded && opts.isDataLoaded) {\n            clearInterval(interval)\n            state.open = true\n            resolve()\n          }\n        }, 200)\n      }\n    })\n  },\n\n  close() {\n    state.open = false\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ThemeCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nfunction isDarkMode() {\n  return typeof matchMedia !== 'undefined' && matchMedia('(prefers-color-scheme: dark)').matches\n}\n\nconst state = proxy<ThemeCtrlState>({\n  themeMode: isDarkMode() ? 'dark' : 'light'\n})\n\n// -- controller --------------------------------------------------- //\nexport const ThemeCtrl = {\n  state,\n\n  subscribe(callback: (newState: ThemeCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setThemeConfig(theme: ThemeCtrlState) {\n    const { themeMode, themeVariables } = theme\n\n    if (themeMode) {\n      state.themeMode = themeMode\n    }\n\n    if (themeVariables) {\n      state.themeVariables = { ...themeVariables }\n    }\n  }\n}\n","import type { ConfigCtrlState, ThemeCtrlState } from '@walletconnect/modal-core'\nimport { ConfigCtrl, ModalCtrl, OptionsCtrl, ThemeCtrl } from '@walletconnect/modal-core'\n\n/**\n * Types\n */\nexport type WalletConnectModalConfig = ConfigCtrlState & ThemeCtrlState\n\n/**\n * Client\n */\nexport class WalletConnectModal {\n  public constructor(config: WalletConnectModalConfig) {\n    ThemeCtrl.setThemeConfig(config)\n    ConfigCtrl.setConfig(config)\n    this.initUi()\n  }\n\n  private async initUi() {\n    if (typeof window !== 'undefined') {\n      await import('@walletconnect/modal-ui')\n      const modal = document.createElement('wcm-modal')\n      document.body.insertAdjacentElement('beforeend', modal)\n      OptionsCtrl.setIsUiLoaded(true)\n    }\n  }\n\n  public openModal = ModalCtrl.open\n\n  public closeModal = ModalCtrl.close\n\n  public subscribeModal = ModalCtrl.subscribe\n\n  public setTheme = ThemeCtrl.setThemeConfig\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ToastCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ToastCtrlState>({\n  open: false,\n  message: '',\n  variant: 'success'\n})\n\n// -- controller --------------------------------------------------- //\nexport const ToastCtrl = {\n  state,\n\n  subscribe(callback: (newState: ToastCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  openToast(message: ToastCtrlState['message'], variant: ToastCtrlState['variant']) {\n    state.open = true\n    state.message = message\n    state.variant = variant\n  },\n\n  closeToast() {\n    state.open = false\n  }\n}\n"],"names":["o","p","history","view","data","N","state","subscribe","e","h","push","t","reset","replace","length","goBack","pop","_o$history$slice","slice","_slicedToArray","setData","i","WALLETCONNECT_DEEPLINK_CHOICE","WCM_VERSION","RECOMMENDED_WALLET_AMOUNT","isMobile","window","Boolean","matchMedia","matches","test","navigator","userAgent","isAndroid","toLowerCase","includes","isIos","isHttpUrl","startsWith","isArray","Array","formatNativeUrl","s","this","formatUniversalUrl","n","replaceAll","concat","endsWith","setWalletConnectDeepLink","a","encodeURIComponent","wait","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","Promise","setTimeout","stop","openHref","open","localStorage","setItem","JSON","stringify","href","name","_unused","console","info","setWalletConnectAndroidDeepLink","_e$split","split","_unused2","removeWalletConnectDeepLink","removeItem","_unused3","setModalVersionInStorage","_unused4","getWalletRouterData","Wallet","Error","x","location","hostname","protocol","r","enabled","userSessionId","events","connectedWalletId","T","crypto","randomUUID","l","chains","walletConnectUri","isAuth","isCustomDesktop","isCustomMobile","isDataLoaded","isUiLoaded","d","setChains","setWalletConnectUri","setIsCustomDesktop","setIsCustomMobile","setIsDataLoaded","setIsUiLoaded","setIsAuth","W","projectId","mobileWallets","desktopWallets","walletImages","enableAuthMode","enableExplorer","explorerExcludedWalletIds","explorerRecommendedWalletIds","termsOfServiceUrl","privacyPolicyUrl","f","setConfig","Object","assign","defineProperty","getOwnPropertySymbols","prototype","hasOwnProperty","propertyIsEnumerable","wallets","listings","total","page","search","recomendedWallets","I","F","_callee8","_context8","_d$state2","uri","setInterval","u","clearInterval","H","D","B","V","j","enumerable","configurable","writable","value","b","themeMode","G","themeVariables","call","_step2","_iterator2","_createForOfIteratorHelper","done","err","K","message","variant","_classCallCheck","openModal","closeModal","subscribeModal","setTheme","initUi","_createClass","key","_initUi","document","createElement","body","insertAdjacentElement","apply","arguments"],"sourceRoot":""}